{"version":3,"sources":["assets/igloo.png","assets/done-24px.svg","models/EComponentType.ts","components/Logo.tsx","components/Header.tsx","data/questions.ts","components/Button.tsx","components/Checkmark.tsx","components/ButtonGroup.tsx","components/Query.tsx","components/Question.tsx","pages/QuestionPage.tsx","data/location.ts","data/statistics.ts","components/Card.tsx","pages/FoundPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ComponentType","Logo","src","LogoPic","alt","style","width","Header","router","useHistory","className","to","onClick","push","QuestionsData","id","question","max_answers","answers","answer","custom_component","type","ButtonGroup","value","data","size","QuestionIds","Button","disabled","children","CheckMark","Check","props","useState","state","setState","onSubmit","length","wanted","onCompleted","useEffect","buttonSize","undefined","map","a","key","includes","filter","i","newState","Query","Question","inputProp","completed","QuestionPage","questions","context","setContext","active","setActive","Object","keys","completedQuestion","Location","7","title","picture","GetLocation","locationId","sort","Math","random","slice","Statistics","statistic","question_id","answer_ids","GetStatistics","s","mapping","user_answers","Card","index","FoundPage","location","useLocation","locations","stats","l","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,6MCAtCC,E,wECOUC,EAJF,kBACT,yBAAKC,IAAKC,IAASC,IAAI,qBAAqBC,MAAO,CAAEC,MAAO,WCiBjDC,EAhBA,WACX,IAAMC,EAASC,cAKf,OAAO,4BAAQC,UAAU,UACrB,kBAAC,IAAD,CAAMC,GAAG,UACL,yBAAKD,UAAU,QACX,kBAAC,EAAD,QAGR,wBAAIE,QAVM,WACVJ,EAAOK,KAAK,WASQH,UAAU,SAA9B,mB,yCFjBHV,O,iBAAAA,I,8BAAAA,M,KAKUA,QGOTc,EAA6B,CAC/B,CACIC,GAXmB,EAYnBC,SAAU,kBACVC,YAAa,EACbC,QAAS,CACL,CACIH,GAAI,EACJI,OAAQ,WAEZ,CACIJ,GAAI,EACJI,OAAQ,UAEZ,CACIJ,GAAI,EACJI,OAAQ,UAEZ,CACIJ,GAAI,EACJI,OAAQ,YAGhBC,iBAAkB,CACdC,KAAMrB,EAAcsB,cAG5B,CACIP,GApCY,EAqCZC,SAAU,uBACVC,YAAa,EACbC,QAAS,CACL,CAAEH,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,WAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,oBAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,YAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,iBAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,6BAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,eAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,wBAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,WAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,aAC9B,CAAEJ,GAAI,EAAGQ,MAAO,KAAMJ,OAAQ,iBAElCC,iBAAkB,CACdC,KAAMrB,EAAcsB,YACpBE,KAAM,CACFC,KAAM,WAIlB,CACIV,GA1Da,EA2DbC,SAAU,yBACVC,YAAa,EACbC,QAAS,CACL,CAAEH,GAAI,EAAGI,OAAQ,SACjB,CAAEJ,GAAI,EAAGI,OAAQ,WACjB,CAAEJ,GAAI,EAAGI,OAAQ,UACjB,CAAEJ,GAAI,EAAGI,OAAQ,UACjB,CAAEJ,GAAI,EAAGI,OAAQ,UACjB,CAAEJ,GAAI,EAAGI,OAAQ,qBACjB,CAAEJ,GAAI,EAAGI,OAAQ,SACjB,CAAEJ,GAAI,EAAGI,OAAQ,aACjB,CAAEJ,GAAI,EAAGI,OAAQ,UACjB,CAAEJ,GAAI,EAAGI,OAAQ,YACjB,CAAEJ,GAAI,GAAII,OAAQ,cAEtBC,iBAAkB,CACdC,KAAMrB,EAAcsB,YACpBE,KAAM,CACFC,KAAM,WAIlB,CACIV,GAjFY,EAkFZC,SAAU,2BACVC,YAAa,EACbC,QAAS,CACL,CAAEH,GAAI,EAAGI,OAAQ,WACjB,CAAEJ,GAAI,EAAGI,OAAQ,SACjB,CAAEJ,GAAI,EAAGI,OAAQ,oBACjB,CAAEJ,GAAI,EAAGI,OAAQ,eACjB,CAAEJ,GAAI,EAAGI,OAAQ,kBACjB,CAAEJ,GAAI,EAAGI,OAAQ,SACjB,CAAEJ,GAAI,EAAGI,OAAQ,qBACjB,CAAEJ,GAAI,GAAII,OAAQ,mBAClB,CAAEJ,GAAI,GAAII,OAAQ,cAClB,CAAEJ,GAAI,GAAII,OAAQ,SAClB,CAAEJ,GAAI,GAAII,OAAQ,cAClB,CAAEJ,GAAI,GAAII,OAAQ,mBAEtBC,iBAAkB,CACdC,KAAMrB,EAAcsB,YACpBE,KAAM,CACFC,KAAM,WAIlB,CACIV,GAzGc,EA0GdC,SAAU,uCACVC,YAAa,EACbC,QAAS,CACL,CAAEH,GAAI,EAAGI,OAAQ,OACjB,CAAEJ,GAAI,EAAGI,OAAQ,OAErBC,iBAAkB,CACdC,KAAMrB,EAAcsB,YACpBE,KAAM,CACFC,KAAM,WAIlB,CACIV,GAvHW,EAwHXC,SAAU,wBACVC,YAAa,EACbC,QAAS,CACL,CAAEH,GAAI,EAAGI,OAAQ,YACjB,CAAEJ,GAAI,EAAGI,OAAQ,YACjB,CAAEJ,GAAI,EAAGI,OAAQ,UACjB,CAAEJ,GAAI,EAAGI,OAAQ,OAErBC,iBAAkB,CACdC,KAAMrB,EAAcsB,YACpBE,KAAM,CACFC,KAAM,WAIlB,CACIV,GAvIU,EAwIVC,SAAU,sBACVC,YAAa,EACbC,QAAS,CACL,CAAEH,GAAI,EAAGI,OAAQ,iCACjB,CAAEJ,GAAI,EAAGI,OAAQ,WACjB,CAAEJ,GAAI,EAAGI,OAAQ,kBACjB,CAAEJ,GAAI,EAAGI,OAAQ,kBACjB,CAAEJ,GAAI,EAAGI,OAAQ,iCACjB,CAAEJ,GAAI,EAAGI,OAAQ,8CACjB,CAAEJ,GAAI,EAAGI,OAAQ,wCACjB,CAAEJ,GAAI,EAAGI,OAAQ,sCACjB,CAAEJ,GAAI,EAAGI,OAAQ,0BACjB,CAAEJ,GAAI,GAAII,OAAQ,2BAClB,CAAEJ,GAAI,GAAII,OAAQ,iBAClB,CAAEJ,GAAI,GAAII,OAAQ,kDAEtBC,iBAAkB,CACdC,KAAMrB,EAAcsB,YACpBE,KAAM,CACFC,KAAM,YAOTC,EAvKO,EAiLLZ,I,QCxKAa,G,MAJA,SAAC,GAA6C,IAA3Cf,EAA0C,EAA1CA,QAASgB,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SACjC,OAAO,4BAAQD,SAAUA,EAAUlB,UAAU,MAAME,QAASA,GAAUiB,K,iBCH3DC,EAJG,kBACd,yBAAK5B,IAAK6B,IAAO3B,IAAI,eC6DVkB,G,MAhDK,SAACU,GAAmB,IAAD,EACXC,mBAAmB,IADR,mBAC9BC,EAD8B,KACvBC,EADuB,KAgB/BC,EAAW,WACPF,EAAMG,QAAU,GAAKH,EAAMG,QAAUL,EAAMM,SAC3CN,EAAMO,YAAYL,GAClBC,EAAS,MAIjBK,qBAAU,WACe,IAAjBR,EAAMM,QACNF,MAEL,CAACF,IAEJ,IAAIO,OAA6BC,IAAfV,EAAMR,KAAsBQ,EAAMR,KAAKC,KAAO,UAEhE,OAAO,yBAAKf,UAAU,QAClB,wBAAIA,UAAW+B,GACVT,EAAMd,QAAQyB,KAAI,SAAAC,GAAC,OAChB,wBAAIC,IAAKD,EAAE7B,GACPL,UAAYwB,EAAMY,SAASF,EAAE7B,IAAM,cAAgB,OACnDH,QAAS,kBAjCX,SAACG,GACX,GAAImB,EAAMY,SAAS/B,GACfoB,EAASD,EAAMa,QAAO,SAAAC,GAAC,OAAIA,IAAMjC,WAEjC,GAAImB,EAAMG,SAAWL,EAAMM,OAAQ,CAC/B,IAAIW,EAAWf,EAAMa,QAAO,SAACH,EAAGI,GAAJ,OAAUA,IAAMd,EAAMG,OAAS,KAC3DF,EAAS,CAACpB,GAAF,mBAASkC,UAEjBd,EAAS,CAACpB,GAAF,mBAASmB,KAyBEtB,CAAQgC,EAAE7B,MACvBmB,EAAMY,SAASF,EAAE7B,IAAM,kBAAC,EAAD,MAAgB,+BACxC6B,EAAEzB,YAIf,yBAAKT,UAAU,qBACTsB,EAAMM,OAAS,GAAKJ,EAAMG,QAAU,EAAK,kBAAC,EAAD,CAAQT,UAAU,EAAOhB,QAASwB,GAAlC,QAA4D,SC7CpGc,EAJD,SAAClB,GACX,OAAO,2BAAOX,KAAK,UCsCR8B,G,MAtCE,SAACnB,GAAmB,IAAD,IACRC,mBAAmB,IADX,mBAC3BC,EAD2B,KACpBC,EADoB,KAGhCK,qBAAU,WACN,GAAIN,EAAMG,QAAU,GAAKH,EAAMG,QAAUL,EAAMf,YAAa,CACxD,IAAIC,EAAUc,EAAMd,QAAQ6B,QAAO,SAAAH,GAAC,OAAIV,EAAMY,SAASF,EAAE7B,OACzDiB,EAAMI,SAASJ,EAAOd,GACtBiB,EAAS,OAEd,CAACD,IAEJ,IAIIkB,EAJAC,EAAY,SAACtC,GACboB,EAAS,GAAD,mBAAKpB,GAAL,YAAYmB,MAKxB,GAAIF,EAAMZ,iBACN,OAAQY,EAAMZ,iBAAiBC,MAC3B,KAAKrB,EAAckD,MACfE,EAAY,kBAAC,EAAD,CAAO5B,KAAMQ,EAAMZ,iBAAiBI,KAAMe,YAAac,IACnE,MACJ,KAAKrD,EAAcsB,YACf8B,EAAY,kBAAC,EAAD,CACRd,OAAQN,EAAMf,YACdO,KAAI,UAAEQ,EAAMZ,wBAAR,aAAE,EAAwBI,KAC9BN,QAASc,EAAMd,QACfqB,YAAac,IAK7B,OAAO,iCACH,wBAAI3C,UAAU,SAASsB,EAAMhB,UAC5BoC,KCjBME,EArBM,WACjB,IAAIC,EAAYzC,EACZN,EAASC,cAFU,EAGKwB,mBAAmB,IAHxB,mBAGlBuB,EAHkB,KAGTC,EAHS,OAIGxB,mBAAoBsB,EAAU,IAJjC,mBAIlBG,EAJkB,KAIVC,EAJU,KAMvBnB,qBAAU,WACFoB,OAAOC,KAAKL,GAASnB,SAAWkB,EAAUlB,QAC1C7B,EAAOK,KAAK,WAAY,CAAEK,QAASsC,MAExC,CAACA,IAQJ,OAAO,kBAAC,EAAD,iBAAeE,EAAf,CAAuBtB,SANJ,SAACpB,EAAqBE,GAC5C,IAAI4C,EAAiB,eAAM9C,EAASD,GAAKG,GACzCuC,EAAW,2BAAKD,GAAYM,IAC5BH,EAAUJ,EAAUvC,EAASD,GAAK,SCrBpCgD,EAA2C,CAC7CC,EAAG,CACC,CAAEC,MAAO,wBAAyBC,QAAS,gCAC3C,CAAED,MAAO,sBAAuBC,QAAS,gCACzC,CAAED,MAAO,uBAAwBC,QAAS,kCAiBnCC,MAbf,SAAqBC,GAEjB,YAA6B1B,IADdqB,EACFK,GACF,GAFIL,EAIUK,GAEEC,MAAK,iBAAM,GAAMC,KAAKC,YAGjCC,MAAM,EAAG,I,QCjBvBC,EAA2B,CAC7B,CACIR,MAAO,mBAAoBS,UAAW,aAAcxD,QAAS,CACzD,CAAEyD,YAAa,EAAGC,WAAY,CAAC,IAC/B,CAAED,YAAa,EAAGC,WAAY,CAAC,EAAG,EAAG,OAG7C,CACIX,MAAO,qBAAsBS,UAAW,eAAgBxD,QAAS,CAC7D,CAAEyD,YAAa,EAAGC,WAAY,CAAC,IAC/B,CAAED,YAAa,EAAGC,WAAY,CAAC,EAAG,EAAG,OAG7C,CACIX,MAAO,qBAAsBS,UAAW,eAAgBxD,QAAS,CAC7D,CAAEyD,YAAa,EAAGC,WAAY,CAAC,IAC/B,CAAED,YAAa,EAAGC,WAAY,CAAC,EAAG,EAAG,OAG7C,CACIX,MAAO,gBAAiBS,UAAW,0BAA2BxD,QAAS,CACnE,CAAEyD,YAAa,EAAGC,WAAY,CAAC,EAAG,EAAG,GAAI,OAGjD,CACIX,MAAO,UAAWS,UAAW,uEAAwExD,QAAS,CAC1G,CAAEyD,YAAa,EAAGC,WAAY,CAAC,MAGvC,CACIX,MAAO,uBAAwBS,UAAW,2DAA4DxD,QAAS,CAC3G,CAAEyD,YAAa,EAAGC,WAAY,CAAC,MAGvC,CACIX,MAAO,OAAQS,UAAW,yBAA0BxD,QAAS,CACzD,CAAEyD,YAAa,EAAGC,WAAY,CAAC,MAGvC,CACIX,MAAO,sBAAuBS,UAAW,qBAAsBxD,QAAS,CACpE,CAAEyD,YAAa,EAAGC,WAAY,CAAC,MAGvC,CACIX,MAAO,eAAgBS,UAAW,iDAAkDxD,QAAS,CACzF,CAAEyD,YAAa,EAAGC,WAAY,CAAC,IAC/B,CAAED,YAAa,EAAGC,WAAY,CAAC,OAGvC,CACIX,MAAO,iDAAkDS,UAAW,0BAA2BxD,QAAS,CACpG,CAAEyD,YAAa,EAAGC,WAAY,CAAC,IAC/B,CAAED,YAAa,EAAGC,WAAY,CAAC,OAGvC,CACIX,MAAO,+BAAgCS,UAAW,WAAYxD,QAAS,CACnE,CAAEyD,YAAa,EAAGC,WAAY,CAAC,IAC/B,CAAED,YAAa,EAAGC,WAAY,CAAC,EAAG,EAAG,IACrC,CAAED,YAAa,EAAGC,WAAY,CAAC,OAsB5BC,MAjBf,SAAuBrB,GAcnB,OAbYiB,EACW1B,QAAO,SAAA+B,GAAM,IAAD,gBACTA,EAAE5D,SADO,IAC/B,2BAAiC,CAAC,IAAD,EAAtB6D,EAAsB,QACzBC,EAAexB,EAAQuB,EAAQJ,aADN,cAERK,GAFQ,IAE7B,2BAAmC,CAAC,IAAzB7D,EAAwB,QAC/B,IAAK4D,EAAQH,WAAW9B,SAAS3B,EAAOJ,IACpC,OAAO,GAJc,gCADF,8BAS/B,OAAO,KAEiBsD,MAAK,iBAAM,GAAMC,KAAKC,YAClCC,MAAM,EAAG,ICzDdS,G,MAfF,SAACjD,GAAD,OACT,yBAAKtB,UAAU,QACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,sBACXsB,EAAMkD,QAGf,yBAAKxE,UAAU,gBAAgBR,IAAK8B,EAAMkC,QAAS9D,IAAI,mBACvD,yBAAKM,UAAU,iBACX,wBAAIA,UAAU,eAAesB,EAAMiC,OAClCjC,EAAMH,aC8BJsD,G,MAtCG,WAAO,IAAD,EAChB3E,EAASC,cACT2E,EAAWC,cAEX7B,EAAoB,GACxB,eAAI4B,EAASlD,aAAb,aAAI,EAAgBhB,SAIhB,OADAV,EAAOK,KAAK,KACL,8BAGX,IAAIuD,GANAZ,EAAU4B,EAASlD,MAAMhB,SAMJQ,GAAyB,GAC9C4D,EAAYnB,EAAYC,EAAWrD,IACnCwE,EAAQ,CAAC,EAAG,EAAG,GAAG5C,KAAI,kBAAMkC,EAAcrB,MAM9C,OAAO,iCACH,wBAAI9C,UAAU,SAAd,iCACA,yBAAKA,UAAU,aACT4E,EAAU3C,KAAI,SAAC6C,EAAGxC,GAAJ,OACZ,kBAAC,EAAD,CAAMH,IAAK2C,EAAEvB,MAAOC,QAASsB,EAAEtB,QAASD,MAAOuB,EAAEvB,MAAOiB,MAAOlC,EAAI,GAC9DuC,EAAMvC,GAAGL,KAAI,SAAAmC,GAAC,OACX,yBAAKjC,IAAKiC,EAAEb,MAAOvD,UAAU,aACzB,wBAAIA,UAAU,mBAAmBoE,EAAEb,OACnC,uBAAGvD,UAAU,sBAAsBoE,EAAEJ,eAG7C,4BAAQ9C,UAAU,EAAMlB,UAAU,SAASE,QAAS,cAApD,oBCpBL6E,MAhBf,WAEI,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,0BAAM/E,UAAU,WACZ,kBAAC,IAAD,CAAOgF,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjC,kBAAC,IAAD,CAAOqC,KAAK,YAAYC,UAAWT,IACnC,kBAAC,IAAD,CAAOQ,KAAK,UACR,kBAAC,IAAD,CAAUhF,GAAG,UCJbkF,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a52e53c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/igloo.c8159948.png\";","module.exports = __webpack_public_path__ + \"static/media/done-24px.ce59afd4.svg\";","enum ComponentType {\n    Query,\n    ButtonGroup\n}\n\nexport default ComponentType;\n","import React from 'react';\nimport LogoPic from '../assets/igloo.png';\n\nconst Logo = () => (\n    <img src={LogoPic} alt=\"Igloo Connect Logo\" style={{ width: \"100%\" }} />\n);\n\nexport default Logo;","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport \"./Header.css\";\nimport Logo from './Logo';\n\nconst Header = () => {\n    const router = useHistory();\n    const route = () => {\n        router.push(\"/reset\");\n    }\n\n    return <header className=\"header\">\n        <Link to=\"/reset\">\n            <div className=\"logo\">\n                <Logo />\n            </div>\n        </Link>\n        <h1 onClick={route} className=\"title\">Igloo Connect</h1>\n    </header>\n}\n\nexport default Header;","import ComponentType from \"../models/EComponentType\";\nimport IQuestion from \"../models/IQuestion\";\n\nconst SELECT_LANGUAGE_ID = 0;\nconst LOCATION_ID = 1;\nconst COMMUNITY_ID = 2;\nconst AMENTIAS_ID = 3;\nconst JOB_SEARCH_ID = 4;\nconst ENGLISH_ID = 5;\nconst SKILLS_ID = 6;\n\n\nconst QuestionsData: IQuestion[] = [\n    {\n        id: SELECT_LANGUAGE_ID,\n        question: \"Select Language\",\n        max_answers: 1,\n        answers: [\n            {\n                id: 0,\n                answer: \"English\"\n            },\n            {\n                id: 1,\n                answer: \"German\"\n            },\n            {\n                id: 2,\n                answer: \"Arabic\"\n            },\n            {\n                id: 3,\n                answer: \"Russian\"\n            }\n        ],\n        custom_component: {\n            type: ComponentType.ButtonGroup\n        }\n    },\n    {\n        id: LOCATION_ID,\n        question: \"I want to live in...\",\n        max_answers: 1,\n        answers: [\n            { id: 0, value: \"AB\", answer: \"Alberta\" },\n            { id: 1, value: \"BC\", answer: \"British Columbia\" },\n            { id: 2, value: \"MB\", answer: \"Manitoba\" },\n            { id: 3, value: \"NB\", answer: \"New Brunswick\" },\n            { id: 4, value: \"NL\", answer: \"Newfoundland and Labrador\" },\n            { id: 5, value: \"NS\", answer: \"Nova Scotia\" },\n            { id: 6, value: \"PE\", answer: \"Prince Edward Island\" },\n            { id: 7, value: \"ON\", answer: \"Ontario\" },\n            { id: 8, value: \"QC\", answer: \"Québec\" },\n            { id: 9, value: \"SK\", answer: \"Saskatchewan\" },\n        ],\n        custom_component: {\n            type: ComponentType.ButtonGroup,\n            data: {\n                size: 'small'\n            }\n        }\n    },\n    {\n        id: COMMUNITY_ID,\n        question: \"with a community of...\",\n        max_answers: 3,\n        answers: [\n            { id: 0, answer: \"Arabs\" },\n            { id: 1, answer: \"Chinese\" },\n            { id: 2, answer: \"Korean\" },\n            { id: 3, answer: \"Indian\" },\n            { id: 4, answer: \"German\" },\n            { id: 5, answer: \"African Americans\" },\n            { id: 6, answer: \"White\" },\n            { id: 7, answer: \"Americans\" },\n            { id: 8, answer: \"Jewish\" },\n            { id: 9, answer: \"European\" },\n            { id: 10, answer: \"Anyone :)\" },\n        ],\n        custom_component: {\n            type: ComponentType.ButtonGroup,\n            data: {\n                size: 'small'\n            }\n        }\n    },\n    {\n        id: AMENTIAS_ID,\n        question: \"I want to live around...\",\n        max_answers: 3,\n        answers: [\n            { id: 0, answer: \"Schools\" },\n            { id: 1, answer: \"Parks\" },\n            { id: 2, answer: \"Restaurants/Bars\" },\n            { id: 4, answer: \"Transit Hub\" },\n            { id: 5, answer: \"Market/Café\" },\n            { id: 6, answer: \"Malls\" },\n            { id: 9, answer: \"Community Centers\" },\n            { id: 10, answer: \"City Activities\" },\n            { id: 11, answer: \"Bike Lanes\" },\n            { id: 12, answer: \"Water\" },\n            { id: 14, answer: \"University\" },\n            { id: 15, answer: \"Grocery Stores\" }\n        ],\n        custom_component: {\n            type: ComponentType.ButtonGroup,\n            data: {\n                size: 'small'\n            }\n        }\n    },\n    {\n        id: JOB_SEARCH_ID,\n        question: \"Do you need to find a job in Canada?\",\n        max_answers: 1,\n        answers: [\n            { id: 0, answer: \"Yes\" },\n            { id: 1, answer: \"No\" },\n        ],\n        custom_component: {\n            type: ComponentType.ButtonGroup,\n            data: {\n                size: 'small'\n            }\n        }\n    },\n    {\n        id: ENGLISH_ID,\n        question: \"Do you speak English?\",\n        max_answers: 1,\n        answers: [\n            { id: 0, answer: \"Fluently\" },\n            { id: 1, answer: \"Decently\" },\n            { id: 2, answer: \"Poorly\" },\n            { id: 3, answer: \"No\" },\n        ],\n        custom_component: {\n            type: ComponentType.ButtonGroup,\n            data: {\n                size: 'small'\n            }\n        }\n    },\n    {\n        id: SKILLS_ID,\n        question: \"Select your skills:\",\n        max_answers: 3,\n        answers: [\n            { id: 1, answer: \"Architecture and Construction\" },\n            { id: 2, answer: \"Finance\" },\n            { id: 3, answer: \"Health Science\" },\n            { id: 4, answer: \"Human Services\" },\n            { id: 5, answer: \"Marketing, Sales and Services\" },\n            { id: 6, answer: \"Transportation, Distribution and Logistics\" },\n            { id: 7, answer: \"Agriculture, Food, Natural Resources\" },\n            { id: 8, answer: \"Arts, Audio, Video, Communications\" },\n            { id: 9, answer: \"Education and Training\" },\n            { id: 10, answer: \"Hospitality and Tourism\" },\n            { id: 11, answer: \"Manufacturing\" },\n            { id: 12, answer: \"Science, Technology, Engineering, Mathematics\" },\n        ],\n        custom_component: {\n            type: ComponentType.ButtonGroup,\n            data: {\n                size: 'small'\n            }\n        }\n    }\n];\n\n\nexport const QuestionIds = {\n    SELECT_LANGUAGE_ID: SELECT_LANGUAGE_ID,\n    LOCATION_ID: LOCATION_ID,\n    COMMUNITY_ID: COMMUNITY_ID,\n    AMENTIAS_ID: AMENTIAS_ID,\n    JOB_SEARCH_ID: JOB_SEARCH_ID,\n    ENGLISH_ID: ENGLISH_ID,\n    SKILLS_ID: SKILLS_ID,\n}\n\nexport default QuestionsData;","import React from 'react';\nimport \"./Button.css\";\n\ninterface IProps {\n    onClick: () => void,\n    children: any,\n    disabled: boolean,\n}\n\nconst Button = ({ onClick, disabled, children }: IProps) => {\n    return <button disabled={disabled} className=\"btn\" onClick={onClick}>{children}</button>\n}\n\nexport default Button;","import React from 'react';\nimport Check from '../assets/done-24px.svg';\n\nconst CheckMark = () => (\n    <img src={Check} alt=\"CheckMark\" />\n);\n\nexport default CheckMark;","import React, { useEffect, useState } from 'react';\nimport Button from '../components/Button';\nimport CheckMark from '../components/Checkmark';\nimport IAnswer from '../models/IAnswer';\nimport \"./ButtonGroup.css\"\n\ninterface Data {\n    size: string,\n}\n\ninterface IProps {\n    wanted: number,\n    answers: IAnswer[],\n    data?: Data,\n    onCompleted: (id: number[]) => void;\n}\n\nconst ButtonGroup = (props: IProps) => {\n    let [state, setState] = useState<number[]>([]);\n\n    let onClick = (id: number) => {\n        if (state.includes(id)) {\n            setState(state.filter(i => i !== id))\n        } else {\n            if (state.length === props.wanted) {\n                let newState = state.filter((a, i) => i !== state.length - 1)\n                setState([id, ...newState])\n            } else {\n                setState([id, ...state]);\n            }\n        }\n    }\n\n    let onSubmit = () => {\n        if (state.length >= 1 && state.length <= props.wanted) {\n            props.onCompleted(state);\n            setState([]);\n        }\n    }\n\n    useEffect(() => {\n        if (props.wanted === 1) {\n            onSubmit();\n        }\n    }, [state])\n\n    let buttonSize = (props.data !== undefined) ? props.data.size : \"regular\";\n\n    return <div className=\"full\">\n        <ul className={buttonSize}>\n            {props.answers.map(a =>\n                <li key={a.id}\n                    className={(state.includes(a.id) ? \"item active\" : \"item\")}\n                    onClick={() => onClick(a.id)}>\n                    {(state.includes(a.id) ? <CheckMark /> : <span />)}\n                    {a.answer}\n                </li>\n            )}\n        </ul>\n        <div className=\"full full--margin\">\n            {(props.wanted > 1 && state.length >= 1) ? <Button disabled={false} onClick={onSubmit}>Next</Button> : null}\n        </div>\n    </div>\n}\n\nexport default ButtonGroup;","import React from 'react';\n\ninterface IData {\n    url: string,\n}\n\ninterface IProps {\n    data: IData,\n    onCompleted: (id: number[]) => void;\n}\n\nconst Query = (props: IProps) => {\n    return <input type=\"text\" />\n}\n\nexport default Query;","import React, { useEffect, useState } from 'react';\nimport ComponentType from '../models/EComponentType';\nimport IAnswer from '../models/IAnswer';\nimport IQuestion from '../models/IQuestion';\nimport ButtonGroup from '../components/ButtonGroup';\nimport Query from '../components/Query';\nimport \"./Question.css\";\n\ninterface IProps extends IQuestion {\n    onSubmit: (question: IQuestion, answers: IAnswer[]) => void;\n}\n\nconst Question = (props: IProps) => {\n    let [state, setState] = useState<number[]>([]);\n\n    useEffect(() => {\n        if (state.length >= 1 && state.length <= props.max_answers) {\n            let answers = props.answers.filter(a => state.includes(a.id));\n            props.onSubmit(props, answers);\n            setState([]);\n        }\n    }, [state])\n\n    let completed = (id: number[]) => {\n        setState([...id, ...state]);\n    }\n\n    let inputProp;\n\n    if (props.custom_component) {\n        switch (props.custom_component.type) {\n            case ComponentType.Query:\n                inputProp = <Query data={props.custom_component.data} onCompleted={completed} />\n                break;\n            case ComponentType.ButtonGroup:\n                inputProp = <ButtonGroup\n                    wanted={props.max_answers}\n                    data={props.custom_component?.data}\n                    answers={props.answers}\n                    onCompleted={completed} />\n                break;\n        }\n    }\n\n    return <section>\n        <h1 className=\"title\">{props.question}</h1>\n        {inputProp}\n    </section>\n}\n\nexport default Question;","import React, { useEffect, useState } from 'react';\nimport QuestionsData from '../data/questions';\nimport IAnswer from '../models/IAnswer';\nimport IContext from '../models/IContext';\nimport IQuestion from '../models/IQuestion';\nimport Questions from '../components/Question';\nimport { useHistory } from 'react-router-dom';\n\nconst QuestionPage = () => {\n    let questions = QuestionsData;\n    let router = useHistory();\n    let [context, setContext] = useState<IContext>({});\n    let [active, setActive] = useState<IQuestion>(questions[0]);\n\n    useEffect(() => {\n        if (Object.keys(context).length === questions.length) {\n            router.push(\"location\", { answers: context });\n        }\n    }, [context]);\n\n    let updateQuestionnaire = (question: IQuestion, answers: IAnswer[]) => {\n        let completedQuestion = { [question.id]: answers };\n        setContext({ ...context, ...completedQuestion });\n        setActive(questions[question.id + 1]);\n    }\n\n    return <Questions {...active} onSubmit={updateQuestionnaire} />;\n}\n\nexport default QuestionPage;","import ILocation from \"../models/ILocation\";\n\nconst Location: { [key: number]: ILocation[] } = {\n    7: [\n        { title: \"White Oaks, London ON\", picture: \"/static/images/whiteoaks.png\" },\n        { title: \"Bostwick, London ON\", picture: \"/static/images/whiteoaks.png\" },\n        { title: \"High Land, London ON\", picture: \"/static/images/whiteoaks.png\" }\n    ]\n};\n\nfunction GetLocation(locationId: number): ILocation[] {\n    let location = Location;\n    if (location[locationId] === undefined) {\n        return [];\n    }\n    let locations = location[locationId];\n    // Shuffle array\n    const shuffled = locations.sort(() => 0.5 - Math.random());\n\n    // Get sub-array of first n elements after shuffled\n    return shuffled.slice(0, 3);\n}\n\nexport default GetLocation;","import { IStatistic } from \"../models/ICommunities\";\nimport IContext from \"../models/IContext\";\n\nconst Statistics: IStatistic[] = [\n    {\n        title: 'Community: Arabs', statistic: \"1.6% Arabs\", answers: [\n            { question_id: 1, answer_ids: [7] },\n            { question_id: 2, answer_ids: [0, 6, 10] }\n        ]\n    },\n    {\n        title: 'Community: Indians', statistic: \"5.8% Indians\", answers: [\n            { question_id: 1, answer_ids: [7] },\n            { question_id: 2, answer_ids: [3, 6, 10] }\n        ]\n    },\n    {\n        title: 'Community: Chinese', statistic: \"5.6% Chinese\", answers: [\n            { question_id: 1, answer_ids: [7] },\n            { question_id: 2, answer_ids: [3, 6, 10] }\n        ]\n    },\n    {\n        title: 'Top Amenities', statistic: \"Parks, Schools, Grocery\", answers: [\n            { question_id: 3, answer_ids: [0, 1, 13, 14] },\n        ]\n    },\n    {\n        title: 'Ontario', statistic: \"Bendale, Bayview Woods-Steeles, Broadview North, Etobicoke West Mall\", answers: [\n            { question_id: 1, answer_ids: [7] },\n        ]\n    },\n    {\n        title: 'German Neighborhoods', statistic: \"Bloor West Village, Little Bavaria, Roncesvalles Village\", answers: [\n            { question_id: 2, answer_ids: [4] },\n        ]\n    },\n    {\n        title: 'Jobs', statistic: \"5.6% Unemployment rate\", answers: [\n            { question_id: 4, answer_ids: [0] },\n        ]\n    },\n    {\n        title: 'English Proficiency', statistic: \"86.3% English only\", answers: [\n            { question_id: 5, answer_ids: [5] },\n        ]\n    },\n    {\n        title: 'Skills: STEM', statistic: \"36,698 new tech jobs. Average salary: $62,522.\", answers: [\n            { question_id: 4, answer_ids: [0] },\n            { question_id: 6, answer_ids: [12] },\n        ]\n    },\n    {\n        title: 'Transportation, Distribution and Logistics: : ', statistic: \"Average salary: $44,836\", answers: [\n            { question_id: 4, answer_ids: [0] },\n            { question_id: 6, answer_ids: [12] },\n        ]\n    },\n    {\n        title: 'Jobs Within Walking Distance', statistic: \"Plumbing\", answers: [\n            { question_id: 4, answer_ids: [0] },\n            { question_id: 5, answer_ids: [0, 1, 2] },\n            { question_id: 6, answer_ids: [6] }\n        ]\n    }\n];\n\nfunction GetStatistics(context: IContext): IStatistic[] {\n    let stats = Statistics;\n    let statistics = stats.filter(s => {\n        for (const mapping of s.answers) {\n            let user_answers = context[mapping.question_id];\n            for (const answer of user_answers) {\n                if (!mapping.answer_ids.includes(answer.id)) {\n                    return false\n                }\n            }\n        }\n        return true;\n    });\n    const shuffled = statistics.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, 3);\n}\n\nexport default GetStatistics;","import React from 'react';\nimport \"./Card.css\";\n\ninterface IProps {\n    index: number,\n    picture: string,\n    title: string,\n    children: any\n}\n\nconst Card = (props: IProps) => (\n    <div className=\"card\">\n        <div className=\"card__number\">\n            <span className=\"card__number--text\">\n                {props.index}\n            </span>\n        </div>\n        <img className=\"card__picture\" src={props.picture} alt=\"map of picture\" />\n        <div className=\"card__content\">\n            <h2 className=\"card__title\">{props.title}</h2>\n            {props.children}\n        </div>\n    </div>\n)\n\nexport default Card;","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport IContext from '../models/IContext';\nimport GetLocation from '../data/location';\nimport GetStatistics from '../data/statistics';\nimport { QuestionIds } from '../data/questions';\nimport Card from '../components/Card';\nimport \"../components/Question.css\";\nimport \"./FoundPage.css\";\nimport Button from '../components/Button';\nimport ILocation from '../models/ILocation';\n\nconst FoundPage = () => {\n    let router = useHistory();\n    let location = useLocation<{ answers: IContext }>();\n\n    let context: IContext = {};\n    if (location.state?.answers) {\n        context = location.state.answers;\n    } else {\n        router.push(\"/\");\n        return <div></div>\n    }\n\n    let locationId = context[QuestionIds.LOCATION_ID][0];\n    let locations = GetLocation(locationId.id);\n    let stats = [1, 2, 3].map(() => GetStatistics(context));\n\n    const select = (location: ILocation) => {\n\n    }\n\n    return <section>\n        <h1 className=\"title\">Here's what we found for you:</h1>\n        <div className=\"container\">\n            {(locations.map((l, i) =>\n                <Card key={l.title} picture={l.picture} title={l.title} index={i + 1}>\n                    {stats[i].map(s =>\n                        <div key={s.title} className=\"statistic\">\n                            <h3 className=\"statistic__text\">{s.title}</h3>\n                            <p className=\"statistic__subtext\">{s.statistic}</p>\n                        </div>\n                    )}\n                    <button disabled={true} className=\"button\" onClick={() => select(l)}>Checkout</button>\n                </Card>\n            ))}\n        </div>\n    </section>\n}\n\nexport default FoundPage;","import React from 'react';\nimport { BrowserRouter, Redirect, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport \"./App.css\";\nimport QuestionPage from './pages/QuestionPage';\nimport FoundPage from './pages/FoundPage';\n\nfunction App() {\n\n    return (\n        <BrowserRouter>\n            <Header />\n            <main className=\"content\">\n                <Route exact path=\"/\" component={QuestionPage} />\n                <Route path=\"/location\" component={FoundPage} />\n                <Route path=\"/reset\">\n                    <Redirect to=\"/\" />\n                </Route>\n            </main>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}